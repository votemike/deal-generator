{"version":3,"sources":["utilities/formatters.js","utilities/formDataMolder.js","pages/InvestorPack.js"],"names":["formatter","Intl","NumberFormat","style","currency","formatCurrency","amount","format","toMortgage","formData","mortgageFee","Fee","parseFloat","Finance","mortgageAmount","initialMortgageRate","toProperty","mortgage","payments","annualPayments","map","object","Payment","rental","Rental","rentalIncome","lettingFee","Property","name","toSale","stampDuty","calculate","price","propertyTypes","RESIDENTIAL","countries","ENGLAND","buyerTypes","INVESTOR","tax","fees","acquisitionFees","push","Sale","InvestorPack","useState","image","setImage","sale","property","requiredMoney","calculateTotalCosts","refurbCost","refurbLoanCosts","totalOneOffCosts","moneyLeftIn","monthlyProfit","calculateMonthlyProfit","feesTotal","reduce","prev","cur","Math","round","estimatedFinalValue","blurb","setBlurb","className","type","onChange","event","URL","createObjectURL","target","files","icon","faUpload","placeholder","value","id","src","maxWidth","maxHeight","margin","display","alt","split","line","i","key","abs","onClick","element","document","getElementById","then","domToPdf","default"],"mappings":"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","file":"static/js/6.8b91e966.chunk.js","sourcesContent":["const formatter = new Intl.NumberFormat('en-GB', {style: 'currency', currency: 'GBP'});\nconst formatCurrency = amount => {\n  return formatter.format(amount)\n};\n\nexport {\n  formatCurrency\n};\n","import {Fee, Finance, Payment, Property, Rental, Sale} from \"@votemike/property\";\nimport {buyerTypes, calculate, countries, propertyTypes} from \"uk-ireland-stampduty-calculator\";\n\nconst toMortgage = formData => {\n  const mortgageFee = new Fee(parseFloat(formData.mortgageFee));\n  return new Finance(parseFloat(formData.mortgageAmount), false, 0, parseFloat(formData.initialMortgageRate), [mortgageFee]);\n\n};\n\nconst toProperty = formData => {\n  const mortgage = toMortgage(formData);\n  const payments = formData.annualPayments.map((object) => {\n    return new Payment(parseFloat(object.amount), 'yearly');\n  });\n  const rental = new Rental(parseFloat(formData.rentalIncome), parseFloat(formData.lettingFee));\n\n  return new Property(formData.name, [mortgage], payments, [rental]);\n};\n\nconst toSale = formData => {\n  const stampDuty = calculate(parseFloat(formData.price), propertyTypes.RESIDENTIAL, countries.ENGLAND, buyerTypes.INVESTOR).tax;\n  const fees = formData.acquisitionFees.map((object) => {\n    return new Fee(parseFloat(object.amount));\n  });\n  fees.push(new Fee(stampDuty));\n\n  return new Sale(parseFloat(formData.price), fees);\n};\n\nexport {\n  toMortgage,\n  toProperty,\n  toSale\n};\n","import React, {useState} from \"react\";\nimport {formatCurrency} from \"../utilities/formatters\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport { faUpload } from '@fortawesome/free-solid-svg-icons'\nimport {toMortgage, toProperty, toSale} from \"../utilities/formDataMolder\";\n\nconst InvestorPack = ({formData}) => {\n  const [image, setImage] = useState('');\n\n  const handleChange = (event) => {\n    setImage(URL.createObjectURL(event.target.files[0]));\n  }\n\n  const printPDF = () => {\n    const element = document.getElementById('pdf-container');\n    import(\"dom-to-pdf\").then(domToPdf => {\n      domToPdf.default(element, {});\n    });\n  };\n\n  const sale = toSale(formData);\n  const mortgage = toMortgage(formData);\n  const property = toProperty(formData);\n  const requiredMoney = sale.calculateTotalCosts() + parseFloat(formData.refurbCost) + parseFloat(formData.refurbLoanCosts) + mortgage.totalOneOffCosts;\n  const mortgageAmount = parseFloat(formData.mortgageAmount);\n  const moneyLeftIn = requiredMoney-mortgageAmount;\n  const monthlyProfit = property.calculateMonthlyProfit();\n  const saleFeesTotal = sale.fees.reduce(function(prev, cur) {\n    return prev + cur.amount;\n  }, 0);\n  const mortgageFeesTotal = mortgage.fees.reduce(function(prev, cur) {\n    return prev + cur.amount;\n  }, 0);\n  const feesTotal = saleFeesTotal + mortgageFeesTotal;\n\n  const [blurb, setBlurb] = useState(`${property.name} is a property that should be able to generate ${Math.round(100*monthlyProfit*12/moneyLeftIn)}% yearly return on an amount of ${formatCurrency(moneyLeftIn)} left in the deal.\\nWith a price of ${formatCurrency(parseFloat(formData.price))}, fees of ${formatCurrency(feesTotal)} and refurbishment costs of ${formatCurrency(parseFloat(formData.refurbCost) + parseFloat(formData.refurbLoanCosts))}, the total amount of money required is ${formatCurrency(requiredMoney)}. The property has an estimated refurbished value of ${formatCurrency(formData.estimatedFinalValue)}.\\nA 75% LTV mortgage of ${formatCurrency(mortgageAmount)} would mean ${formatCurrency(moneyLeftIn)} is left in the deal.\\nMonthly profit after fees and costs should be ${formatCurrency(monthlyProfit)}; leading to a yearly ROI of ${Math.round(100*monthlyProfit*12/moneyLeftIn)}%.`);\n\n  const handleBlurbChange = (event) => {\n    setBlurb(event.target.value);\n  }\n\n  return (\n    <>\n      <section className=\"section pt-5\">\n        <div className=\"container\">\n          <header>\n            <h1 className=\"title is-1\">Generate Investor Pack</h1>\n          </header>\n          <p className=\"mb-4\">Upload your logo and write a blurb about the property in order to generate a PDF to hand out to potential investors.</p>\n          <div className=\"box\">\n            <h2 className=\"title is-3\">Generate Investor Pack</h2>\n            <div className=\"field\">\n              <div className=\"file is-info\">\n                <label className=\"file-label\">\n                  <input className=\"file-input\" type=\"file\" name=\"resume\" onChange={handleChange}/>\n                  <span className=\"file-cta\">\n                    <span className=\"file-icon\">\n                      <FontAwesomeIcon icon={faUpload} />\n                    </span>\n                    <span className=\"file-label\">\n                      Upload your logoâ€¦\n                    </span>\n                  </span>\n                </label>\n              </div>\n            </div>\n            <div className=\"field\">\n              <div className=\"control\">\n                <textarea className=\"textarea\" placeholder=\"Property Blurb\" value={blurb} onChange={handleBlurbChange}/>\n              </div>\n            </div>\n          </div>\n          <div className=\"box\">\n            <div id=\"pdf-container\" className='section'>\n              {image && <img src={image} style={{maxWidth: '100%', maxHeight: '90px', margin: '10px auto', display: 'block'}} alt='logo'/>}\n              <div className='tile is-ancestor'>\n                <div className='tile is-vertical is-parent is-size-5 is-8'>\n                  <div className='tile is-vertical'>\n                    <h2 className='title'>{property.name}</h2>\n                    {blurb.split('\\n').map((line, i) => {\n                      return <p key={i}>{line}</p>;\n                    })}\n                  </div>\n                </div>\n                <div className='tile is-parent is-vertical'>\n                  <div className=\"tile is-child notification is-primary is-light\">\n                    <h2 className='title'>Required Money</h2>\n                    <p className='subtitle'>{formatCurrency(requiredMoney)}</p>\n                  </div>\n                  <div className=\"tile is-child notification is-warning\">\n                    <h2 className='title'>Final Value</h2>\n                    <p className='subtitle'>{formatCurrency(formData.estimatedFinalValue)}</p>\n                  </div>\n                  <div className=\"tile is-child notification is-info\">\n                    <h2 className='title'>Profit</h2>\n                    <p className='subtitle'>{formatCurrency(parseFloat(formData.estimatedFinalValue) - requiredMoney)}</p>\n                  </div>\n                  <div className=\"tile is-child notification is-danger\">\n                    <h2 className='title'>Mortgage Amount</h2>\n                    <p className='subtitle'>{formatCurrency(mortgageAmount)}</p>\n                  </div>\n                  <div className=\"tile is-child notification is-info is-light\">\n                    <h2 className='title'>{moneyLeftIn > 0 ? \"Money Left In Deal\" : \"Money Pulled Out\"}</h2>\n                    <p className='subtitle'>{formatCurrency(Math.abs(moneyLeftIn))}</p>\n                  </div>\n                  <div className=\"tile is-child notification is-primary\">\n                    <h2 className='title'>Monthly Cashflow</h2>\n                    <p className='subtitle'>{formatCurrency(monthlyProfit)}</p>\n                  </div>\n                  <div className=\"tile is-child notification is-success\">\n                    <h2 className=\"title\">Yearly ROI</h2>\n                    <p className=\"subtitle\">{moneyLeftIn > 0 ? Math.round(100*monthlyProfit*12/moneyLeftIn) : \"Infinite\"}%</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <button onClick={printPDF} className=\"button is-primary\">\n            Download PDF\n          </button>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default InvestorPack;\n"],"sourceRoot":""}